--/////////////////////////////////////////////////////////////////////
--////                              
--////  File: DUNE_DAT_FPGA.VHD            
--////                                                                                                                                      
--////  Author: Jack Fried			                  
--////          jfried@bnl.gov	              
--////  Created:  04/08/2022
--////  Modified: 02/08/2022
--//// 
--////  Description:  TOP LEVEL DUNE DAT tester
--////					  preliminary -- CODE
--////
--/////////////////////////////////////////////////////////////////////
--////
--//// Copyright (C) 2022 Brookhaven National Laboratory
--////
--/////////////////////////////////////////////////////////////////////

library ieee;
use ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity DUNE_DAT_FPGA is
	port 
	(
	
	
	
	
		--#DAT_FPGA_CLK
		--SBND_CLK_P
		--CLK_100MHz_OSC_P
		CLK_DAQ_P		: IN STD_LOGIC;
		--CLK_125MHz_OSC_P
		--#set_location_assignment PIN_AA23 -to c125_LP_P
		--#set_location_assignment PIN_K10 -to c125_LP_P
		--#set_location_assignment PIN_W26 -to CLK_LP_P
		--#set_location_assignment PIN_T15 -to CLK_LP_P

	
		
--		I2C_LVDS_SDA_W2C_N 				: IN STD_LOGIC;
		I2C_LVDS_SDA_W2C_P 				: IN STD_LOGIC;
--		I2C_LVDS_SDA_C2W_N 				: OUT STD_LOGIC;
		I2C_LVDS_SDA_C2W_P 				: OUT STD_LOGIC;
--		I2C_LVDS_SCL_N 					: IN STD_LOGIC;
		I2C_LVDS_SCL_P 					: IN STD_LOGIC;
--		FASTCOMMAND_IN_N 					: IN STD_LOGIC;
		FASTCOMMAND_IN_P 					: IN STD_LOGIC;
--		CLK_64MHZ_SYS_N 					: IN STD_LOGIC;
		CLK_64MHZ_SYS_P 					: IN STD_LOGIC;
	
		CD1_CLK_64MHZ_SYS_P 				: OUT STD_LOGIC;
--		CD1_CLK_64MHZ_SYS_N 				: OUT STD_LOGIC;
		CD1_FASTCOMMAND_IN_P 			: OUT STD_LOGIC;
--		CD1_FASTCOMMAND_IN_N 			: OUT STD_LOGIC;
		CD1_I2C_LVDS_SCL_P 				: OUT STD_LOGIC;
--		CD1_I2C_LVDS_SCL_N 				: OUT STD_LOGIC;
		CD1_I2C_LVDS_SDA_C2W_P 			: IN STD_LOGIC;
--		CD1_I2C_LVDS_SDA_C2W_N 			: OUT STD_LOGIC;
		CD1_I2C_LVDS_SDA_W2C_P 			: OUT STD_LOGIC;
--		CD1_I2C_LVDS_SDA_W2C_N 			: OUT STD_LOGIC;
		CD2_CLK_64MHZ_SYS_P 				: OUT STD_LOGIC;
--		CD2_CLK_64MHZ_SYS_N 				: OUT STD_LOGIC;
		CD2_FASTCOMMAND_IN_P 			: OUT STD_LOGIC;
--		CD2_FASTCOMMAND_IN_N 			: OUT STD_LOGIC;
		CD2_I2C_LVDS_SCL_P 				: OUT STD_LOGIC;
--		CD2_I2C_LVDS_SCL_N 				: OUT STD_LOGIC;
		CD2_I2C_LVDS_SDA_C2W_P 			: IN STD_LOGIC;
--		CD2_I2C_LVDS_SDA_C2W_N 			: OUT STD_LOGIC;
		CD2_I2C_LVDS_SDA_W2C_P 			: OUT STD_LOGIC;
--		CD2_I2C_LVDS_SDA_W2C_N 			: OUT STD_LOGIC;

		
		CD1_CMOS_MODE 						: OUT STD_LOGIC;
		CD1_PAD_RESET 						: OUT STD_LOGIC;
		CD1_CHIP_ID 						: OUT STD_LOGIC;
		CD2_CMOS_MODE 						: OUT STD_LOGIC;
		CD2_PAD_RESET 						: OUT STD_LOGIC;
		CD2_CHIP_ID 						: OUT STD_LOGIC;

		FE1_CALI_CS 						: OUT STD_LOGIC;
		FE1_INS_PLS_CS 					: OUT STD_LOGIC;
		FE1_TEST_INH 						: OUT STD_LOGIC;
		ADC1_TEST_INH 						: OUT STD_LOGIC;
		FE1_INA_SDA 						: OUT STD_LOGIC;
		FE1_INA_SCL 						: OUT STD_LOGIC;
		FE1_MonADC_SDO 					: IN STD_LOGIC;
		ADC1_MonADC_SDO 					: IN STD_LOGIC;
		ADC1_POR_NAND 						: OUT STD_LOGIC;
		FE1_DAC_TP_DIN 					: OUT STD_LOGIC;
		FE2_CALI_CS 						: OUT STD_LOGIC;
		FE2_INS_PLS_CS 					: OUT STD_LOGIC;
		FE2_TEST_INH 						: OUT STD_LOGIC;
		ADC2_TEST_INH 						: OUT STD_LOGIC;
		FE2_INA_SDA 						: INOUT STD_LOGIC;
		FE2_INA_SCL 						: OUT STD_LOGIC;
		FE2_MonADC_SDO 					: IN STD_LOGIC;
		ADC2_MonADC_SDO 					: IN STD_LOGIC;
		ADC2_POR_NAND 						: OUT STD_LOGIC;
		FE2_DAC_TP_DIN 					: OUT STD_LOGIC;
		CD1_MonADC_SDO 					: IN STD_LOGIC;
		CD1_MonADC_SCK 					: OUT STD_LOGIC;
		CD1_MonADC_CS 						: OUT STD_LOGIC;
		CD1_AMON_INH 						: OUT STD_LOGIC;
		CD1_AMON_CSB 						: OUT STD_LOGIC;
		CD1_AMON_CSA 						: OUT STD_LOGIC;
		CD1_AMON_CSC 						: OUT STD_LOGIC;

		FE3_CALI_CS 						: OUT STD_LOGIC;
		FE3_INS_PLS_CS 					: OUT STD_LOGIC;
		FE3_TEST_INH 						: OUT STD_LOGIC;
		ADC3_TEST_INH 						: OUT STD_LOGIC;
		FE3_INA_SDA 						: INOUT STD_LOGIC;
		FE3_INA_SCL 						: OUT STD_LOGIC;
		FE3_MonADC_SDO 					: IN STD_LOGIC;
		ADC3_MonADC_SDO 					: IN STD_LOGIC;
		ADC3_POR_NAND 						: OUT STD_LOGIC;
		FE3_DAC_TP_DIN 					: OUT STD_LOGIC;
		FE4_CALI_CS 						: OUT STD_LOGIC;
		FE4_INS_PLS_CS 					: OUT STD_LOGIC;
		FE4_TEST_INH 						: OUT STD_LOGIC;
		ADC4_TEST_INH 						: OUT STD_LOGIC;
		FE4_INA_SDA 						: INOUT STD_LOGIC;
		FE4_INA_SCL 						: OUT STD_LOGIC;
		FE4_MonADC_SDO 					: IN STD_LOGIC;
		ADC4_MonADC_SDO 					: IN STD_LOGIC;
		ADC4_POR_NAND 						: OUT STD_LOGIC;
		FE4_DAC_TP_DIN 					: OUT STD_LOGIC;
		ADC_TST_SEL 						: OUT STD_LOGIC_VECTOR(7 downto 0);
		CD1_FPGA_CD_INA_SDA 				: INOUT STD_LOGIC;
		CD1_FPGA_CD_INA_SCL 				: OUT STD_LOGIC;



		FE5_CALI_CS 						: OUT STD_LOGIC;
		FE5_INS_PLS_CS 					: OUT STD_LOGIC;
		FE5_TEST_INH 						: OUT STD_LOGIC;
		ADC5_TEST_INH 						: OUT STD_LOGIC;
		FE5_INA_SDA 						: INOUT STD_LOGIC;
		FE5_INA_SCL 						: OUT STD_LOGIC;
		FE5_MonADC_SDO 					: IN STD_LOGIC;
		ADC5_MonADC_SDO 					: IN STD_LOGIC;
		ADC5_POR_NAND 						: OUT STD_LOGIC;
		FE5_DAC_TP_DIN 					: OUT STD_LOGIC;
		FE6_CALI_CS 						: OUT STD_LOGIC;
		FE6_INS_PLS_CS 					: OUT STD_LOGIC;
		FE6_TEST_INH 						: OUT STD_LOGIC;
		ADC6_TEST_INH 						: OUT STD_LOGIC;
		FE6_INA_SDA 						: INOUT STD_LOGIC;
		FE6_INA_SCL 						: OUT STD_LOGIC;
		FE6_MonADC_SDO 					: IN STD_LOGIC;
		ADC6_MonADC_SDO 					: IN STD_LOGIC;
		ADC6_POR_NAND 						: OUT STD_LOGIC;
		FE6_DAC_TP_DIN 					: OUT STD_LOGIC;
		CD2_MonADC_SDO 					: IN STD_LOGIC;
		CD2_MonADC_SCK 					: OUT STD_LOGIC;
		CD2_MonADC_CS 						: OUT STD_LOGIC;
		CD2_AMON_INH 						: OUT STD_LOGIC;
		CD2_AMON_CSB 						: OUT STD_LOGIC;
		CD2_AMON_CSA 						: OUT STD_LOGIC;
		CD2_AMON_CSC 						: OUT STD_LOGIC;

		FE7_CALI_CS 						: OUT STD_LOGIC;
		FE7_INS_PLS_CS 					: OUT STD_LOGIC;
		FE7_TEST_INH 						: OUT STD_LOGIC;
		ADC7_TEST_INH 						: OUT STD_LOGIC;
		FE7_INA_SDA 						: INOUT STD_LOGIC;
		FE7_INA_SCL 						: OUT STD_LOGIC;
		FE7_MonADC_SDO 					: IN STD_LOGIC;
		ADC7_MonADC_SDO 					: IN STD_LOGIC;
		ADC7_POR_NAND 						: OUT STD_LOGIC;
		FE7_DAC_TP_DIN 					: OUT STD_LOGIC;
		FE8_CALI_CS 						: OUT STD_LOGIC;
		FE8_INS_PLS_CS 					: OUT STD_LOGIC;
		FE8_TEST_INH 						: OUT STD_LOGIC;
		ADC8_TEST_INH 						: OUT STD_LOGIC;
		FE8_INA_SDA 						: INOUT STD_LOGIC;
		FE8_INA_SCL 						: OUT STD_LOGIC;
		FE8_MonADC_SDO 					: IN STD_LOGIC;
		ADC8_MonADC_SDO 					: IN STD_LOGIC;
		ADC8_POR_NAND 						: OUT STD_LOGIC;
		FE8_DAC_TP_DIN 					: OUT STD_LOGIC;

		CD2_FPGA_CD_INA_SDA 				: INOUT STD_LOGIC;
		CD2_FPGA_CD_INA_SCL 				: OUT STD_LOGIC;


		CD1_CONTROL						 	: IN STD_LOGIC_VECTOR(4 downto 0);
		CD2_CONTROL							: IN STD_LOGIC_VECTOR(4 downto 0);

		I2C_CD1_ADD_GND 					: OUT STD_LOGIC;
		I2C_CD1_ADD_VDD 					: OUT STD_LOGIC;
		I2C_CD2_ADD_VDD 					: OUT STD_LOGIC;
		I2C_CD2_ADD_GND 					: OUT STD_LOGIC;
		CD2_ADC_I2C_ADD2 					: OUT STD_LOGIC;
		CD2_ADC_I2C_ADD3 					: OUT STD_LOGIC;
		CD1_ADC_I2C_ADD2 					: OUT STD_LOGIC;
		CD1_ADC_I2C_ADD3 					: OUT STD_LOGIC;
		ADC1_RO_OUT 						: IN STD_LOGIC;
		ADC1_CHIP_ACTIVE 					: OUT STD_LOGIC;
		ADC2_CHIP_ACTIVE 					: OUT STD_LOGIC;
		ADC2_RO_OUT 						: IN STD_LOGIC;
		ADC3_CHIP_ACTIVE 					: OUT STD_LOGIC;
		ADC3_RO_OUT 						: IN STD_LOGIC;
		ADC4_CHIP_ACTIVE 					: OUT STD_LOGIC;
		ADC4_RO_OUT 						: IN STD_LOGIC;
		ADC5_CHIP_ACTIVE 					: OUT STD_LOGIC; 
		ADC5_RO_OUT							: IN STD_LOGIC; 
		ADC6_CHIP_ACTIVE					: OUT STD_LOGIC; 
		ADC6_RO_OUT							: IN STD_LOGIC; 
		ADC7_CHIP_ACTIVE					: OUT STD_LOGIC; 
		ADC7_RO_OUT							: IN STD_LOGIC; 
		ADC8_CHIP_ACTIVE					: OUT STD_LOGIC; 
		ADC8_RO_OUT							: IN STD_LOGIC; 



		FE_IN_TST_SEL 						: OUT STD_LOGIC_VECTOR(15 downto 0);

		ADC_P_TST_CSA						: OUT STD_LOGIC; 
		ADC_P_TST_CSB						: OUT STD_LOGIC; 
		ADC_P_TST_CSC						: OUT STD_LOGIC; 
		ADC_P_TST_AMON_INH				: OUT STD_LOGIC; 
		ADC_N_TST_CSA						: OUT STD_LOGIC; 
		ADC_N_TST_CSB						: OUT STD_LOGIC; 
		ADC_N_TST_CSC						: OUT STD_LOGIC; 
		ADC_N_TST_AMON_INH				: OUT STD_LOGIC; 
		DAC_ADC_N_SYNC						: OUT STD_LOGIC; 
		DAC_ADC_N_SCK						: OUT STD_LOGIC; 
		DAC_ADC_N_DIN						: OUT STD_LOGIC; 
		DAC_ADC_P_SYNC						: OUT STD_LOGIC; 
		DAC_ADC_P_SCK						: OUT STD_LOGIC; 
		DAC_ADC_P_DIN						: OUT STD_LOGIC; 
		EXT_PULSE_CNTL						: OUT STD_LOGIC; 

		FE_DAC_TP_SCK						: OUT STD_LOGIC; 
		FE_DAC_TP_SYNC						: OUT STD_LOGIC; 
		FE_TEST_CSC							: OUT STD_LOGIC; 
		FE_TEST_CSB							: OUT STD_LOGIC; 
		FE_TEST_CSA							: OUT STD_LOGIC; 
		ADC_TEST_CSC						: OUT STD_LOGIC; 
		ADC_TEST_CSB						: OUT STD_LOGIC; 
		ADC_TEST_CSA						: OUT STD_LOGIC; 
		ADC_MonADC_SCK						: OUT STD_LOGIC; 
		ADC_MonADC_CS						: OUT STD_LOGIC; 
		FE_MonADC_SCK						: OUT STD_LOGIC; 
		FE_MonADC_CS						: OUT STD_LOGIC; 
--		FE_TEST_CSA							: OUT STD_LOGIC; 
--		FE_TEST_CSB							: OUT STD_LOGIC; 
--		FE_TEST_CSC							: OUT STD_LOGIC; 
		FE_TEST_INH							: OUT STD_LOGIC; 
		DAC_TP_SYNC							: OUT STD_LOGIC; 
		DAC_TP_SCK							: OUT STD_LOGIC; 
		DAC_TP_DIN							: OUT STD_LOGIC; 
		MISC_U1_IO							: out STD_LOGIC_VECTOR(5 downto 0)
	
	
	);

end DUNE_DAT_FPGA;


architecture DUNE_DAT_FPGA_arch of DUNE_DAT_FPGA is


component DAT_PLL
	PORT
	(
		inclk0		: IN STD_LOGIC  := '0';
		c0		: OUT STD_LOGIC ;
		c1		: OUT STD_LOGIC ;
		c2		: OUT STD_LOGIC ;
		c3		: OUT STD_LOGIC ;
		locked		: OUT STD_LOGIC 
	);
end component;



SIGNAL	CLK_125MHz		:  STD_LOGIC;
SIGNAL	CLK_100MHz		:  STD_LOGIC;
SIGNAL	CLK_62_5MHz		:  STD_LOGIC;
SIGNAL	CLK_50MHz 		:  STD_LOGIC;

SIGNAL	SYS_RESET		:  STD_LOGIC;
SIGNAL	reset 			:  STD_LOGIC;
SIGNAL	start				:  STD_LOGIC;

SIGNAL	WIB_SCL_OUT			: STD_LOGIC;	
SIGNAL	WIB_ADDRESS			: STD_LOGIC_VECTOR(7 downto 0);	
SIGNAL	WIB_DATA_OUT		: STD_LOGIC_VECTOR(7 downto 0);	
SIGNAL	WIB_DATA_IN			: STD_LOGIC_VECTOR(7 downto 0);	
SIGNAL	WIB_WR				: STD_LOGIC;	
SIGNAL	WIB_RD				: STD_LOGIC;	
SIGNAL	WIB_READ_DONE 		: STD_LOGIC;	

SIGNAL	reg0_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg1_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg2_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg3_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg4_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg5_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg6_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg7_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg8_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg9_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg10_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg11_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg12_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg13_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg14_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg15_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg16_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg17_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg18_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg19_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg20_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg21_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg22_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg23_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg24_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg25_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg26_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg27_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg28_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg29_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg30_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg31_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg32_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg33_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg34_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg35_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg36_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg37_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg38_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg39_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg40_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg41_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg42_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg43_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg44_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg45_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg46_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg47_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg48_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg49_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg50_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg51_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg52_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg53_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg54_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg55_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg56_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg57_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg58_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);
SIGNAL	reg59_p 			:  STD_LOGIC_VECTOR(7  DOWNTO 0);



SIGNAL	I2C_SDA_c2w		:  STD_LOGIC;
SIGNAL	I2C_SDA_W2C		:  STD_LOGIC;
SIGNAL	I2C_SCL			:  STD_LOGIC;
SIGNAL	CD_sEL			:  STD_LOGIC;

begin






----- register map -------

MISC_U1_IO(0) <= I2C_LVDS_SDA_W2C_P;
MISC_U1_IO(1) <= FASTCOMMAND_IN_P;
MISC_U1_IO(2) <= CLK_64MHZ_SYS_P;
MISC_U1_IO(3) <= CLK_62_5MHz;
MISC_U1_IO(4) <= CLK_100MHz;





		
		
			
		CD_sEL				<= reg1_p(0);
		CD1_PAD_RESET 		<= not reg1_p(4);
		CD2_PAD_RESET 		<= not reg1_p(5);
		
		
		
		
		
		

sys_rst_inst : entity work.sys_rst
PORT MAP(	clk 			=> CLK_50MHz,
				reset_in 	=> SYS_RESET,
				start 		=> start,
				RST_OUT 		=> reset);
		
		

DAT_PLL_inst	: DAT_PLL
	PORT MAP	(
		inclk0	=>	CLK_64MHZ_SYS_P,
		c0			=>	CLK_125MHz,
		c1			=>	CLK_100MHz,
		c2			=>	CLK_62_5MHz,
		c3			=>	CLK_50MHz,
		locked	=> open);

	
I2CSLAVE : entity work.I2CSLAVE

	port MAP(
		sys_clk			=> CLK_62_5MHz,
		rst				=> SYS_RESET,
		FPGA_ADDRESS	=> '0',
		I2C_BRD_ADDR	=> b"1100000",
		SDA_IO_IN		=> I2C_LVDS_SDA_W2C_P ,
		SDA_IO_OUT		=> I2C_LVDS_SDA_C2W_P,		
		SCL				=> I2C_LVDS_SCL_P,
		REG_ADDRESS		=> WIB_ADDRESS,
		REG_DOUT			=> WIB_DATA_OUT,
		REG_DIN			=> WIB_DATA_IN,
		REG_WR_STRB		=> WIB_WR,	
		REG_RD_STRB 	=> WIB_RD,
		CD_c2W_IN		=> I2C_SDA_c2w,
		CD_W2C_IN		=> I2C_SDA_W2C,
		CD_I2C_SCL		=> I2C_SCL);
	
	
			
		CD1_CLK_64MHZ_SYS_P	<= CLK_64MHZ_SYS_P;
		CD2_CLK_64MHZ_SYS_P	<= CLK_64MHZ_SYS_P;
		
		CD1_FASTCOMMAND_IN_P	<= FASTCOMMAND_IN_P;
		CD2_FASTCOMMAND_IN_P	<= FASTCOMMAND_IN_P; 					
	
	
		CD1_I2C_LVDS_SCL_P	<= I2C_SCL;
		CD2_I2C_LVDS_SCL_P	<= I2C_SCL;
	
		CD1_I2C_LVDS_SDA_W2C_P 	<= I2C_SDA_W2C;
		CD2_I2C_LVDS_SDA_W2C_P 	<= I2C_SDA_W2C;
	
	
	
	
	
	---------CD master slave select and ADC address swap ---------
	
		CD1_CMOS_MODE 			<= not CD_sEL;
		CD1_CHIP_ID 			<= not CD_sEL;
		
		CD2_CMOS_MODE 			<= CD_sEL;
		CD2_CHIP_ID 			<= CD_sEL;
	
	
		I2C_SDA_c2w <= CD1_I2C_LVDS_SDA_C2W_P  when CD_sEL = '0' else
							CD2_I2C_LVDS_SDA_C2W_P;
					
			
			
							
		I2C_CD1_ADD_GND 		<= '0';
		I2C_CD1_ADD_VDD 		<= '1';
		CD1_ADC_I2C_ADD2 		<= CD_sEL;
		CD1_ADC_I2C_ADD3 	   <= not CD_sEL;
		
		
		I2C_CD2_ADD_GND 		<= '0';		
		I2C_CD2_ADD_VDD 		<= '1';
		CD2_ADC_I2C_ADD2 		<= not CD_sEL;
		CD2_ADC_I2C_ADD3 		<= CD_sEL;
		
		
						
							
							
		
--------------------------------------
		
		
		
		

	
	
	
	
DUNE_DAT_Registers_inst :  entity work.DUNE_DAT_Registers
	PORT MAP
	(
		rst         => reset,	
		clk         => CLK_62_5MHz,

		BOARD_ID		=> x"0A", --16bit
		VERSION_ID	=> x"2B",
		
		
		WIB_data       =>	WIB_DATA_IN,
		WIB_WR_address => WIB_ADDRESS,
		WIB_RD_address => WIB_ADDRESS,
		WIB_WR    	 	=> WIB_WR,
		WIB_data_out	=> WIB_DATA_OUT,
			
		
		reg0_i 	=> reg0_p,
		reg1_i 	=> reg1_p,		 
		reg2_i 	=> reg2_p,		 
		reg3_i 	=> reg3_p,	
		reg4_i 	=> reg4_p,
		reg5_i 	=> reg5_p,
		reg6_i 	=> reg6_p,
		reg7_i 	=> reg7_p,
		reg8_i 	=> reg8_p,
		reg9_i 	=> reg9_p,		 
		reg10_i 	=> reg10_p,
		reg11_i 	=> reg11_p,		
		reg12_i 	=> reg12_p,
		reg13_i 	=> reg13_p,
		reg14_i 	=> reg14_p,	
		reg15_i 	=> reg15_p,	
		reg16_i 	=> reg16_p,
		reg17_i 	=> reg17_p,
		reg18_i 	=> reg18_p,
		reg19_i 	=> reg19_p,		 
		reg20_i  => reg20_p,
		reg21_i 	=> reg21_p,
		reg22_i 	=> reg22_p,
		reg23_i 	=> reg23_p,
		reg24_i 	=> reg24_p,
		reg25_i 	=> reg25_p,	
		reg26_i 	=> reg26_p,
		reg27_i 	=> reg27_p,
		reg28_i 	=> reg28_p,
		reg29_i 	=> reg29_p,		 
		reg30_i  => reg30_p,	
		reg31_i 	=> reg31_p,
		reg32_i 	=> reg32_p,
		reg33_i 	=> reg33_p,
		reg34_i 	=> reg34_p,
		reg35_i 	=> reg35_p,	
		reg36_i 	=> reg36_p,
		reg37_i 	=> reg37_p,
		reg38_i 	=> reg38_p,
		reg39_i 	=> reg39_p,			 		 
		reg40_i 	=> reg40_p,	
		reg41_i 	=> reg41_p,
		reg42_i 	=> reg42_p,
		reg43_i 	=> reg43_p,
		reg44_i 	=> reg44_p,
		reg45_i 	=> reg45_p,	
		reg46_i 	=> reg46_p,
		reg47_i 	=> reg47_p,
		reg48_i 	=> reg48_p,
		reg49_i 	=> reg49_p,		 
		reg50_i  => reg50_p,	
		reg51_i 	=> reg51_p,
		reg52_i 	=> reg52_p,
		reg53_i 	=> reg53_p,
		reg54_i 	=> reg54_p,
		reg55_i 	=> reg55_p,	
		reg56_i 	=> reg56_p,
		reg57_i 	=> reg57_p,
		reg58_i 	=> reg58_p,
		reg59_i 	=> reg59_p,			 		 


		
		reg0_o 	=> reg0_p,
		reg1_o 	=> reg1_p,		 
		reg2_o 	=> reg2_p,		 
		reg3_o   => reg3_p,
		reg4_o 	=> reg4_p,
		reg5_o 	=> reg5_p,
		reg6_o 	=> reg6_p,
		reg7_o 	=> reg7_p,
		reg8_o 	=> reg8_p,
		reg9_o 	=> reg9_p,
		reg10_o 	=> reg10_p,
		reg11_o 	=> reg11_p,
		reg12_o 	=> reg12_p,
		reg13_o 	=> reg13_p,
		reg14_o 	=> reg14_p,
		reg15_o 	=> reg15_p,
		reg16_o 	=> reg16_p,
		reg17_o 	=> reg17_p,
		reg18_o 	=> reg18_p,
		reg19_o 	=> reg19_p,		
		reg20_o 	=> reg20_p,	
		reg21_o 	=> reg21_p,
		reg22_o 	=> reg22_p,
		reg23_o 	=> reg23_p,
		reg24_o 	=> reg24_p,
		reg25_o 	=> reg25_p,
		reg26_o 	=> reg26_p,
		reg27_o 	=> reg27_p,
		reg28_o 	=> reg28_p,
		reg29_o 	=> reg29_p,	 
		reg30_o 	=> reg30_p,
		reg31_o 	=> reg31_p,
		reg32_o 	=> reg32_p,
		reg33_o 	=> reg33_p,
		reg34_o 	=> reg34_p,
		reg35_o 	=> reg35_p,
		reg36_o 	=> reg36_p,
		reg37_o 	=> reg37_p,
		reg38_o 	=> reg38_p,
		reg39_o 	=> reg39_p,		
		reg40_o 	=> reg40_p,
		reg41_o 	=> reg41_p,
		reg42_o 	=> reg42_p,
		reg43_o 	=> reg43_p,
		reg44_o 	=> reg44_p,
		reg45_o 	=> reg45_p,	
		reg46_o 	=> reg46_p,
		reg47_o 	=> reg47_p,
		reg48_o 	=> reg48_p,
		reg49_o 	=> reg49_p,		 
		reg50_o  => reg50_p,	
		reg51_o 	=> reg51_p,
		reg52_o 	=> reg52_p,
		reg53_o 	=> reg53_p,
		reg54_o 	=> reg54_p,
		reg55_o 	=> reg55_p,	
		reg56_o 	=> reg56_p,
		reg57_o 	=> reg57_p,
		reg58_o 	=> reg58_p,
		reg59_o 	=> reg59_p			 		 


		
	);

end DUNE_DAT_FPGA_arch;
